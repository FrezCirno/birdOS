;-----------------------------------------------------------------------------
; 描述符
; usage: Descriptor Base, Limit, Attr
;        Base:  dd (32 bits)
;        Limit: dd (low 20 bits available)
;        Attr:  dw (lower 4 bits of higher byte are always 0)
;-----------------------------------------------------------------------------
%macro Descriptor 3
    dw %2 & 0xFFFF    ; 段界限 15-0    (2 字节)
    dw %1 & 0xFFFF    ; 段基址 15-0    (2 字节)
    db (%1 >> 16) & 0xFF   ; 段基址 23-16    (1 字节)
    dw ((%2 >> 8) & 0x0F00) | (%3 & 0xF0FF) ; 段界限 19-16 + 属性  (2 字节)
    db (%1 >> 24) & 0xFF   ; 段基址 31-24    (1 字节)
%endmacro ; 共 8 字节
;-----------------------------------------------------------------------------
; 门
; usage: Gate Selector, Offset, DCount, Attr
;        Selector:  dw
;        Offset:    dd
;        DCount:    db
;        Attr:      db
;-----------------------------------------------------------------------------
%macro Gate 4
    dw  (%2 & 0FFFFh)       ; 偏移 1    (2 字节)
    dw  %1                  ; 选择子    (2 字节)
    dw  (%3 & 1Fh) | ((%4 << 8) & 0FF00h)   ; 属性     (2 字节)
    dw  ((%2 >> 16) & 0FFFFh)               ; 偏移 2   (2 字节)
%endmacro ; 共 8 字节
;-----------------------------------------------------------------------------
; 属性字段
; 0x0F00 不使用 (这部分是段界限)
;-----------------------------------------------------------------------------
DA_G         equ   0x8000  ; 段界限粒度, 1表示4K字节, 0表示单字节
DA_D         equ   0x4000  ; (兼容性设置)默认的操作数/栈指针大小, 1表示32位保护模式: 32位操作数/使用ESP寄存器, 0表示16位保护模式: 16位操作数/使用SP寄存器. 16位保护模式已经罕见, 所以一般置1
DA_L         equ   0x2000  ; 64位代码段标志, 此处置0即可
DA_P         equ   0x80  ; 该段是否在内存中
DA_S         equ   0x10  ; 描述符类型, 1表示数据段/代码段描述符, 0表示系统段/门描述符
DA_DPL3      equ   0x60  ; DPL = 3
DA_DPL2      equ   0x40  ; DPL = 2
DA_DPL1      equ   0x20  ; DPL = 1
DA_DPL0      equ   0x00  ; DPL = 0
;-------------------------------------------------
; 代码段和数据段(S=1)的type字段
;-------------------------------------------------
DA_A         equ  0x1  ; 最近是否访问过该段, 由处理器自动设置, 需要OS清零
;-------------------------------------------------
DA_DRO       equ   DA_S | 0x0  ; 数据段 只读
DA_DRW       equ   DA_S | 0x2  ; 数据段 读写
DA_DRO_D     equ   DA_S | 0x4  ; 数据段 只读 向下拓展(类似栈)
DA_DRW_D     equ   DA_S | 0x6  ; 数据段 读写 向下拓展(类似栈)
;-------------------------------------------------
DA_CXO       equ   DA_S | 0x8  ; 代码段 只执行
DA_CXR       equ   DA_S | 0xA  ; 代码段 执行,读
DA_CXO_C     equ   DA_S | 0xC  ; 代码段 只执行 一致/依从
DA_CXR_C     equ   DA_S | 0xE  ; 代码段 执行,读 一致/依从
; 一致/依从性: 
; 0表示可以被特权级相同的代码段调用, 或者通过门调用
; 1表示可以被特权级更低的代码段调用
;-------------------------------------------------
; 系统段(S=0)的type字段
;-------------------------------------------------
DA_LDT        equ   !DA_S & 0x2  ; 局部描述符表段
DA_TaskGate   equ   !DA_S & 0x5  ; 任务门
DA_386TSS     equ   !DA_S & 0x9  ; 可用 386 任务状态段
DA_386CGate   equ   !DA_S & 0xC  ; 386 调用门
DA_386IGate   equ   !DA_S & 0xE  ; 386 中断门
DA_386TGate   equ   !DA_S & 0xF  ; 386 陷阱门
;-----------------------------------------------------------------------------


;----------------------------------------------------------------------------
; 分页机制使用的常量说明
;----------------------------------------------------------------------------
PG_P     equ   0x1   ; 页存在属性位
PG_RW    equ   0x2   ; R/W 属性位值, 0表示只读, 1表示读写
PG_US    equ   0x4   ; U/S 属性位值, 0表示系统级, 1表示用户级
PG_PWT   equ   0x8   ; 
PG_PCD   equ   0x10   ; 
PG_A     equ   0x20   ; 
PG_PS    equ   0x80   ; 
PG_G     equ   0x100   ; 

; PTE
PG_D     equ   0x40
PG_PAT   equ   0x80